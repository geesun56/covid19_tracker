{"version":3,"sources":["components/Cards/Cards.module.css","components/Cards/Cards.js","api/index.js","components/Chart/Chart.js","components/CountryPicker/CountryPicker.js","App.js","reportWebVitals.js","index.js","App.module.css","components/Chart/Chart.module.css","components/CountryPicker/CountryPicker.module.css"],"names":["module","exports","Cards","props","data","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","confirmed","value","duration","separator","Date","lastUpdate","toDateString","recovered","deaths","url","fetchData","country","a","accessUrl","axios","get","fetchDailyData","console","error","fetchCountries","countries","map","con","name","Chart","useState","dailyData","setDailyData","useEffect","LoadData","log","lineChart","labels","d","reportDate","datasets","total","label","borderColor","fill","backgroundColor","barChart","options","legend","display","title","text","CountryPicker","setCountries","handleCountryChange","then","rows","getCountries","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","App","setData","selectedCountry","setCountry","dataLoading","image","alt","src","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.647f9286.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__3bjn6\",\"card\":\"Cards_card__eGUfZ\",\"infected\":\"Cards_infected__-adYp\",\"recovered\":\"Cards_recovered__1aizD\",\"deaths\":\"Cards_deaths__Qdjzq\"};","import React from 'react';\nimport './Cards.module.css'\nimport {Card, CardContent, Typography, Grid} from '@material-ui/core';\nimport styles from './Cards.module.css';\nimport CountUp from 'react-countup';\nimport cx from 'classnames';\n\nconst Cards = (props)  => {\n\n    \n    const {data} = props\n\n    return (\n        <div className={styles.container}>\n            <Grid container spacing={3} justify=\"center\">\n                \n                <Grid item component={Card} xs={12} md={4} className={cx(styles.card, styles.infected)}>\n                <CardContent>\n                    <Typography color=\"secondary\" gutterBottom>Infected</Typography>\n                    <Typography variant=\"h5\">\n                        <CountUp start ={0} end={data.confirmed.value} duration ={2} separator=\",\"/>\n                    </Typography>\n                    <Typography color=\"primary\">{new Date(data.lastUpdate).toDateString()}</Typography>\n                    <Typography variant=\"body2\">Number of active cases of COVID-19</Typography>\n                </CardContent>\n                </Grid>\n\n                <Grid item component={Card} xs={12} md={4} className={cx(styles.card, styles.recovered)}>\n                <CardContent>\n                    <Typography color=\"secondary\" gutterBottom>Recovered</Typography>\n                    <Typography variant=\"h5\">\n                        <CountUp start ={0} end={data.recovered.value} duration ={2} separator=\",\"/>\n                    </Typography>\n                    <Typography color=\"primary\">{new Date(data.lastUpdate).toDateString()}</Typography>\n                    <Typography variant=\"body2\">Number of recoveries from COVID-19</Typography>\n                </CardContent>\n                </Grid>\n\n                <Grid item component={Card} xs={12} md={4} className={cx(styles.card, styles.deaths)}>\n                <CardContent>\n                    <Typography color=\"secondary\" gutterBottom>Deaths</Typography>\n                    <Typography variant=\"h5\">\n                        <CountUp start ={0} end={data.deaths.value} duration ={2} separator=\",\"/>\n                    </Typography>\n                    <Typography color=\"primary\">{new Date(data.lastUpdate).toDateString()}</Typography>\n                    <Typography variant=\"body2\">Number of deaths caused by COVID-19</Typography>\n                </CardContent>\n                </Grid>\n            </Grid>\n        </div>\n    )\n}\n\n\nexport default Cards;\n","import axios from 'axios'; //request api calls\n\nconst url = 'https://covid19.mathdro.id/api';\n\nexport const fetchData = async (country) => {\n\n    let accessUrl = url;\n\n    if(country){\n        accessUrl = `${url}/countries/${country}`\n    }\n\n    try{\n        const { data: {confirmed, recovered, deaths, lastUpdate } } = await axios.get(accessUrl);\n\n        // const modifiedData = {\n        //     confirmed,\n        //     recovered,\n        //     deaths,\n        //     lastUpdate,\n        // }\n        \n        return {confirmed, recovered, deaths, lastUpdate };\n\n    }catch(error){\n        \n    }\n}\n\nexport const fetchDailyData = async () => {\n\n    try{\n        const {data} = await axios.get(`${url}/daily`)\n\n        return data\n    }catch(error){\n        console.error(error);\n    }\n}\n\nexport const fetchCountries = async () => {\n    try{\n        const {data: {countries}} = await axios.get(`${url}/countries`);\n        \n        return countries.map((con) => con.name)\n\n    }catch(error){\n        console.error(error);\n\n    }\n}\n\n","import React, {useState, useEffect } from 'react';\nimport {fetchDailyData} from '../../api';\nimport {Line, Bar} from 'react-chartjs-2'\nimport styles from './Chart.module.css'\nconst Chart = (props)  => {\n    const [dailyData, setDailyData] = useState({});\n    const {country} = props;\n    const {confirmed, deaths, recovered} = props.data;\n\n\n    useEffect(()=> {\n        LoadData();\n        console.log(country)\n        console.log(confirmed)\n    }\n    , [])\n    \n\n    const lineChart = (\n        dailyData[0] ?\n        (<Line\n        data ={{\n            labels: dailyData.map((d) => d.reportDate),\n            datasets:[{\n                data: dailyData.map((d) => d.confirmed.total),\n                label: 'Confirmed',\n                borderColor: '#3333ff',\n                fill: true\n            },{\n                data: dailyData.map((d) => d.deaths.total),\n                label: 'Deaths',\n                borderColor: 'red',\n                backgroundColor: 'rgba(255, 0, 0, 0.5)',\n                fill: true\n            }]\n        }}\n        />): null\n    )\n\n    const barChart  =(\n        confirmed ? \n        (<Bar\n            data={{\n                labels: ['Infected', 'Recovered', 'Deaths'],\n                datasets: [{\n                    label: 'people',\n                    backgroundColor: [\n                        'rgba(0,0,255, 0.5)',\n                        'rgba(0,255,0, 0.5)',\n                        'rgba(255,0,0, 0.5)'],\n                        data: [confirmed.value, recovered.value, deaths.value]\n                }],\n            }}\n\n            options={{\n                legend:{display:false},\n                title: {display: true, text:`Current state in ${country}`}\n            }}\n        />)\n        : null\n    );\n\n    return (\n        <div className={styles.container}>\n            {country? barChart: lineChart}\n            \n        </div>\n    )\n\n    async function LoadData(){\n        const data = await fetchDailyData();\n        console.log(data)\n        setDailyData(data);\n\n    }\n}\n\n\nexport default Chart;\n","import React, {useState, useEffect} from 'react';\nimport {NativeSelect, FormControl} from '@material-ui/core'\n\nimport styles from './CountryPicker.module.css';\nimport {fetchCountries} from '../../api';\n\nconst CountryPicker = (props)  => {\n    const [countries, setCountries] = useState([]);\n    const {handleCountryChange} = props;\n\n    useEffect(() => {\n        const getCountries = async () => {\n            const rows = await fetchCountries()\n            .then((rows) => {\n                console.log(rows)\n                setCountries(rows)\n                });\n        }\n\n        getCountries();\n\n    }, [setCountries])\n    return (\n        <div>\n            <FormControl className={styles.formControl}>\n                <NativeSelect  defaultValue=\"\" onChange={(e) => handleCountryChange(e.target.value)}>\n                    <option value=\"\"> Global</option>\n                    {countries.map((country) => (<option value={country}>{country}</option>))};\n                </NativeSelect>\n            </FormControl>\n        </div>\n    )\n}\n\n\nexport default CountryPicker;\n","import React, {useEffect, useState} from 'react';\nimport styles from './App.module.css'\nimport { Cards, Chart, CountryPicker } from './components';\nimport {fetchData} from './api/';\n\nfunction App() {\n  \n  const [data, setData]= useState();\n  const [selectedCountry, setCountry] = useState();\n\n  useEffect(() => {\n    dataLoading();\n  }, [])\n\n  const handleCountryChange = async (country) => {\n    console.log(country)\n    setCountry(country);\n    const data = await fetchData(country);\n    setData(data);\n  }\n\n  if(!data){\n    return \"Loading!!\"\n  }\n\n    return (\n      <div className={styles.container}>\n        <img className={styles.image} alt=\"COVID-19\" src=\"https://i.ibb.co/7QpKsCX/image.png\"/>\n        <Cards data ={data}></Cards>\n        <CountryPicker data={data} handleCountryChange={handleCountryChange}></CountryPicker>\n        <Chart data={data} country ={selectedCountry} ></Chart>\n\n      </div>\n    );\n\n  async function dataLoading(){\n    const data = await fetchData();\n    setData(data)\n    \n  }\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1MQN3\",\"image\":\"App_image__3byI1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__1PIOn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__2p8f9\"};"],"sourceRoot":""}